id: uhd_fosphor_display
label: RFNoC Qt Fosphor Display

templates:
  imports: |-
    from PyQt5 import Qt
    import sip
    import uhd
    from gnuradio import uhd
  make: |-
    <%
        win = 'self._%s_win' % id
    %>\
    uhd.fosphor_display(${fft_bins}, ${pwr_bins}, ${wf_lines})
    self.${id}.set_frame_rate(${frame_rate})
    self.${id}.set_frequency_range(${center_freq}, ${samp_rate})
    self.${id}.set_waterfall(${wf_enabled})
    self.${id}.set_grid(${grid_enabled})
    self.${id}.set_palette("${palette}")
    self._${id}_win = sip.wrapinstance(self.${id}.pyqwidget(), Qt.QWidget)
    ${gui_hint() % win}
  callbacks:
  - set_frequency_range(${center_freq}, ${samp_rate})

parameters:
- id: center_freq
  label: Center Frequency
  dtype: real
  default: 0
- id: samp_rate
  label: Sample Rate
  dtype: real
  default: ""
- id: fft_bins
  label: FFT Bins
  dtype: int
  default: 1024
- id: pwr_bins
  label: Power Bins
  dtype: int
  default: 64
- id: wf_enabled
  label: Waterfall
  dtype: enum
  default: 'True'
  options: ['True', 'False']
  option_labels: [Enabled, Disabled]
- id: wf_lines
  label: Waterfall History
  dtype: int
  default: 512
  hide: ${'all' if str(wf_enabled) == 'False' else 'none'}
- id: grid_enabled
  label: Grid
  dtype: enum
  default: 'True'
  options: ['True', 'False']
  option_labels: [Enabled, Disabled]
- id: palette
  label: Color Palette
  dtype: enum
  default: 'True'
  options: ['iron', 'cubehelix', 'sdrangelove_histogram', 'rainbow', 'prog']
  option_labels: [Iron, Cube Helix, SDRangelove, Rainbow, Prog's]
- id: frame_rate
  label: Target Frame Rate
  dtype: int
  default: 30
- id: gui_hint
  label: GUI Hint
  dtype: gui_hint
  default: ""

inputs:
- label: in_hist
  dtype: byte
  vlen: ${fft_bins}
  optional: true
  hide: ${'True' if str(wf_enabled) == 'False' else 'True'}
- label: in_wf
  dtype: byte
  vlen: ${fft_bins}
  optional: true
  hide: ${'True' if str(wf_enabled) == 'False' else 'True'}


outputs:
- domain: message
  id: cfg
  optional: true

file_format: 1
